// Applied per published module
//  The module must define ext.artifactName, version, and ext.publishedDescription

group = 'dev.drewhamilton.inlinedimens'

task sourcesJar(type: Jar) {
    archiveClassifier.set 'sources'
    from android.sourceSets.main.java.srcDirs
}

def javadocDestinationDir = "$buildDir/docs/javadoc"
apply plugin: 'org.jetbrains.dokka-android'
task dokkaJavadoc(type: dokka.class) {
    outputFormat = 'javadoc'
    outputDirectory = javadocDestinationDir
    inputs.dir 'src/main/java'
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    archiveClassifier.set 'javadoc'
    from javadocDestinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

apply plugin: 'maven-publish'
publishing {
    publications {
        release(MavenPublication) {
            groupId group
            artifactId artifactName
            version version

            artifact artifact("$buildDir/outputs/aar/$name-release.aar")
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = artifactName
                description = publishedDescription

                url = 'https://github.com/drewhamilton/InlineDimens'
                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'drewhamilton'
                        name = 'Drew Hamilton'
                        email = 'drew.hamilton.0+android@gmail.com'
                    }
                }

                scm {
                    connection = 'scm:git:github.com/drewhamilton/InlineDimens.git'
                    developerConnection = 'scm:git:ssh://github.com/drewhamilton/InlineDimens.git'
                    url = 'https://github.com/drewhamilton/InlineDimens/tree/master'
                }

                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    project.configurations.implementation.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }

    repositories {
        maven {
            name = "MavenCentral"

            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            def sonatypeIssuesUsername = project.hasProperty('personalSonatypeIssuesUsername')
                    ? personalSonatypeIssuesUsername
                    : 'x'
            def sonatypeIssuesPassword = project.hasProperty('personalSonatypeIssuesPassword')
                    ? personalSonatypeIssuesPassword
                    : 'x'
            credentials {
                username sonatypeIssuesUsername
                password sonatypeIssuesPassword
            }
        }
    }
}

apply plugin: 'signing'
signing {
    sign publishing.publications
}
