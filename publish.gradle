// Applied per published module
//  The module must define ext.artifactName, version, and ext.publishedDescription

group = 'dev.drewhamilton.inlinedimens'

task sourcesJar(type: Jar) {
    archiveClassifier.set 'sources'
    from android.sourceSets.main.java.srcDirs
}

apply plugin: 'org.jetbrains.dokka'
dokkaJavadoc {
    inputs.dir 'src/main/java'
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    archiveClassifier.set 'javadoc'
    from dokkaJavadoc.outputDirectory
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

apply plugin: 'maven-publish'
afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                groupId group
                artifactId artifactName
                version version

                from components.release
                artifact sourcesJar
                artifact javadocJar

                pom {
                    name = artifactName
                    description = publishedDescription

                    url = 'https://github.com/drewhamilton/InlineDimens'
                    licenses {
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id = 'drewhamilton'
                            name = 'Drew Hamilton'
                            email = 'software@drewhamilton.dev'
                        }
                    }

                    scm {
                        connection = 'scm:git:github.com/drewhamilton/InlineDimens.git'
                        developerConnection = 'scm:git:ssh://github.com/drewhamilton/InlineDimens.git'
                        url = 'https://github.com/drewhamilton/InlineDimens/tree/master'
                    }
                }
            }
        }

        repositories {
            maven {
                name = "MavenCentral"

                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                def sonatypeIssuesUsername = findProperty('personalSonatypeIssuesUsername')
                def sonatypeIssuesPassword = findProperty('personalSonatypeIssuesPassword')
                credentials {
                    username sonatypeIssuesUsername
                    password sonatypeIssuesPassword
                }
            }
        }
    }
}

apply plugin: 'signing'
signing {
    def key = findProperty("personalGpgKey")
    def password = findProperty("personalGpgPassword")
    useInMemoryPgpKeys(key, password)
    sign publishing.publications
}
